# FALSE

FALSE

==>

BooleanExpression(BooleanLiteral(False))

# false

false

==>

BooleanExpression(BooleanLiteral(False))

# TRUE

TRUE

==>

BooleanExpression(BooleanLiteral(True))

# true 

true

==>

BooleanExpression(BooleanLiteral(True))

# and

TRUE and FALSE

==>

BooleanExpression(BooleanAnd(BooleanLiteral(True), BooleanLiteral(False)))

# or

TRUE or FALSE

==>

BooleanExpression(BooleanOr(BooleanLiteral(True), BooleanLiteral(False)))

# and or

TRUE and FALSE or TRUE

==>

BooleanExpression(BooleanOr(BooleanAnd(BooleanLiteral(True), BooleanLiteral(False)), BooleanLiteral(True)))

# or and

TRUE or FALSE and TRUE

==>

BooleanExpression(BooleanOr(BooleanLiteral(True), BooleanAnd(BooleanLiteral(False), BooleanLiteral(True))))

# not true 

not true

==>

BooleanExpression(NegatedBooleanTerm(BooleanLiteral(True)))

# BinaryComparisonPredicate boolean literals

true = true

==>

BooleanExpression(BinaryComparisonPredicate(BooleanLiteral(True), ComparisonOperator(Eq), BooleanLiteral(True)))

# BinaryComparisonPredicate character clause

'test' = 'a b '' \\' 1 c'

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), CharacterLiteral))

# BinaryComparisonPredicate character clause casei

'test' = CASEI('test')

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), Casei(CharacterExpression(CharacterLiteral))))

# BinaryComparisonPredicate character clause property name

'test' = CASEI(test)

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), Casei(CharacterExpression(PropertyName))))

# BinaryComparisonPredicate character clause property name quoted

'test' = CASEI("test")

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), Casei(CharacterExpression(PropertyName))))

# BinaryComparisonPredicate casei function

'test' = CASEI(fn(test))

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), Casei(CharacterExpression(Function(PropertyName)))))

# BinaryComparisonPredicate date instanst

'test' = DATE('2000-01-01')

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), DateInstant))

# BinaryComparisonPredicate timestamp instanst

'test' = TIMESTAMP('2000-01-01T12:01:01Z')

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), TimestampInstant))

# BinaryComparisonPredicate arithmetic

'test' = 1 + 1

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), ArithmeticExpression))

