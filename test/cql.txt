# FALSE

FALSE

==>

BooleanExpression(BooleanLiteral)

# false

false

==>

BooleanExpression(BooleanLiteral)

# TRUE

TRUE

==>

BooleanExpression(BooleanLiteral)

# true

true

==>

BooleanExpression(BooleanLiteral)

# and

TRUE and FALSE

==>

BooleanExpression(BinaryComparisonPredicate(BooleanLiteral, "and", BooleanLiteral))

# or

TRUE or FALSE

==>

BooleanExpression(BinaryComparisonPredicate(BooleanLiteral, "or", BooleanLiteral))

# and or

TRUE and FALSE or TRUE

==>

BooleanExpression(BinaryComparisonPredicate(BinaryComparisonPredicate(BooleanLiteral, "and", BooleanLiteral), "or", BooleanLiteral))

# or and

TRUE or FALSE and TRUE

==>

BooleanExpression(BinaryComparisonPredicate(BooleanLiteral, "or", BinaryComparisonPredicate(BooleanLiteral, "and", BooleanLiteral)))

# NOT true

NOT true

==>

BooleanExpression("NOT", BooleanLiteral)

# BinaryComparisonPredicate boolean literals

true = true

==>

BooleanExpression(BinaryComparisonPredicate(BooleanLiteral, Eq, BooleanLiteral))

# BinaryComparisonPredicate character clause

'test' = 'a b '' \\' 1 c'

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, CharacterLiteral))

# BinaryComparisonPredicate character clause casei

'test' = CASEI('test')

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, Casei("CASEI", CharacterLiteral)))

# BinaryComparisonPredicate character clause property name

'test' = CASEI(test)

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, Casei("CASEI", PropertyName)))

# BinaryComparisonPredicate character clause property name quoted

'test' = CASEI("test")

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, Casei("CASEI", PropertyName)))

# BinaryComparisonPredicate casei function

'test' = CASEI(fn(test))

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, Casei("CASEI", Function(PropertyName))))

# BinaryComparisonPredicate date instanst

'test' = DATE('2000-01-01')

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, DateInstant("DATE")))

# BinaryComparisonPredicate timestamp instanst

'test' = TIMESTAMP('2000-01-01T12:01:01Z')

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, TimestampInstant("TIMESTAMP")))

# BinaryComparisonPredicate arithmetic

'test' = 1 + 1

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, NumericLiteral, ArithOp, NumericLiteral))

# BinaryComparisonPredicate numeric literal

'test' = 1

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, NumericLiteral))

# BinaryComparisonPredicate PropertyName

'test' = test

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, PropertyName))

# BinaryComparisonPredicate Function

'test' = fn()

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, Function))

# binary comparison like

'test' LIKE 'test2'

==>

BooleanExpression(IsLikePredicate(CharacterLiteral, "LIKE", CharacterLiteral))

# binary comparison not like

'test' NOT LIKE 'test2'

==>

BooleanExpression(IsLikePredicate(CharacterLiteral, "NOT", "LIKE", CharacterLiteral))

# between comparison

1 BETWEEN 2 AND 3

==>

BooleanExpression(IsBetweenPredicate(NumericLiteral, "BETWEEN", NumericLiteral, "AND", NumericLiteral))

# not between comparison

1 NOT BETWEEN 2 AND 3

==>

BooleanExpression(IsBetweenPredicate(NumericLiteral, "NOT", "BETWEEN", NumericLiteral, "AND", NumericLiteral))

# in comparison

1 IN (2, 3)

==>

BooleanExpression(IsInListPredicate(NumericLiteral, "IN", NumericLiteral, NumericLiteral))

# not in comparison

1 NOT IN (2, 3)

==>

BooleanExpression(IsInListPredicate(NumericLiteral, "NOT", "IN", NumericLiteral, NumericLiteral))
