# FALSE

FALSE

==>

BooleanExpression(BooleanLiteral)

# false

false

==>

BooleanExpression(BooleanLiteral)

# TRUE

TRUE

==>

BooleanExpression(BooleanLiteral)

# true

true

==>

BooleanExpression(BooleanLiteral)

# and

TRUE and FALSE

==>

BooleanExpression(BinaryComparisonPredicate(BooleanLiteral, And("and"), BooleanLiteral))

# or

TRUE or FALSE

==>

BooleanExpression(BinaryComparisonPredicate(BooleanLiteral, Or("or"), BooleanLiteral))

# and or

TRUE and FALSE or TRUE

==>

BooleanExpression(BinaryComparisonPredicate(BinaryComparisonPredicate(BooleanLiteral, And("and"), BooleanLiteral), Or("or"), BooleanLiteral))

# or and

TRUE or FALSE and TRUE

==>

BooleanExpression(BinaryComparisonPredicate(BooleanLiteral, Or("or"), BinaryComparisonPredicate(BooleanLiteral, And("and"), BooleanLiteral)))

# NOT true

NOT true

==>

BooleanExpression(Not("NOT"), BooleanLiteral)

# BinaryComparisonPredicate boolean literals

true = true

==>

BooleanExpression(BinaryComparisonPredicate(BooleanLiteral, Eq, BooleanLiteral))

# BinaryComparisonPredicate character clause

'test' = 'a b '' \\' 1 c'

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, CharacterLiteral))

# BinaryComparisonPredicate character clause casei

'test' = CASEI('test')

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, "CASEI", CharacterLiteral))

# BinaryComparisonPredicate character clause property name

'test' = CASEI(test)

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, "CASEI", PropertyName(Identifier)))

# BinaryComparisonPredicate character clause property name quoted

'test' = CASEI("test")

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, "CASEI", PropertyName(Identifier)))

# BinaryComparisonPredicate casei function

'test' = CASEI(fn(test))

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, "CASEI", Function(Identifier, PropertyName(Identifier))))

# BinaryComparisonPredicate date instanst

'test' = DATE('2000-01-01')

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, DateInstant("DATE", DateInstantString)))

# BinaryComparisonPredicate timestamp instanst

'test' = TIMESTAMP('2000-01-01T12:01:01Z')

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, TimestampInstant("TIMESTAMP", TimestampInstantString)))

# BinaryComparisonPredicate arithmetic

'test' = 1 + 1

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, NumericLiteral, ArithOp, NumericLiteral))

# BinaryComparisonPredicate numeric literal

'test' = 1

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, NumericLiteral))

# BinaryComparisonPredicate negative numeric literal

'test' = -1

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, NumericLiteral))

# BinaryComparisonPredicate PropertyName

'test' = test

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, PropertyName(Identifier)))

# BinaryComparisonPredicate Function

'test' = fn()

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, Eq, Function(Identifier)))

# binary comparison like

'test' LIKE 'test2'

==>

BooleanExpression(IsLikePredicate(CharacterLiteral, Like("LIKE"), CharacterLiteral))

# binary comparison not like

'test' NOT LIKE 'test2'

==>

BooleanExpression(IsLikePredicate(CharacterLiteral, Not("NOT"), Like("LIKE"), CharacterLiteral))

# between comparison

1 BETWEEN 2 AND 3

==>

BooleanExpression(IsBetweenPredicate(NumericLiteral, Between("BETWEEN"), NumericLiteral, And("AND"), NumericLiteral))

# not between comparison

1 NOT BETWEEN 2 AND 3

==>

BooleanExpression(IsBetweenPredicate(NumericLiteral, Not("NOT"), Between("BETWEEN"), NumericLiteral, And("AND"), NumericLiteral))

# in comparison

1 IN (2, 3)

==>

BooleanExpression(IsInListPredicate(NumericLiteral, In("IN"), NumericLiteral, NumericLiteral))

# not in comparison

1 NOT IN (2, 3)

==>

BooleanExpression(IsInListPredicate(NumericLiteral, Not("NOT"), In("IN"), NumericLiteral, NumericLiteral))

# is null comparison

1 IS NULL

==>

BooleanExpression(IsNullPredicate(NumericLiteral, Is("IS"), Null("NULL")))

# is not null comparison

1 IS NOT NULL

==>

BooleanExpression(IsNullPredicate(NumericLiteral, Is("IS"), Not("NOT"), Null("NULL")))

# is null spatial

POINT(0 1) IS NULL

==>

BooleanExpression(IsNullPredicate(GeometryLiteral("POINT", NumericLiteral, NumericLiteral), Is("IS"), Null("NULL")))

# is null spatial 3D

POINT(0 1 2) IS NULL

==>

BooleanExpression(IsNullPredicate(GeometryLiteral("POINT", NumericLiteral, NumericLiteral, NumericLiteral), Is("IS"), Null("NULL")))

# geometry collection is null

GEOMETRYCOLLECTION(POINT(0 1)) IS NULL

==>

BooleanExpression(IsNullPredicate(GeometryCollectionTaggedText("GEOMETRYCOLLECTION", GeometryLiteral("POINT", NumericLiteral, NumericLiteral)), Is("IS"), Null("NULL")))

# geometry collection is null

BBOX(0, 1, 2, 3) IS NULL

==>

BooleanExpression(IsNullPredicate(BboxTaggedText("BBOX", NumericLiteral, NumericLiteral, NumericLiteral, NumericLiteral), Is("IS"), Null("NULL")))

# spatial predicate

S_EQUALS(a, b)

==>

BooleanExpression(SpatialPredicate("S_EQUALS", PropertyName(Identifier), PropertyName(Identifier)))

# temporal predicate

T_AFTER(a, b)

==>

BooleanExpression(TemporalPredicate("T_AFTER", PropertyName(Identifier), PropertyName(Identifier)))

# array predicate

A_EQUALS(a, b)

==>

BooleanExpression(ArrayPredicate("A_EQUALS", PropertyName(Identifier), PropertyName(Identifier)))

# grouped expression

(TRUE and FALSE)

==>

BooleanExpression(ParenthesizedExpression(BinaryComparisonPredicate(BooleanLiteral, And("and"), BooleanLiteral)))
