# FALSE

FALSE

==>

BooleanExpression(BooleanLiteral(False("FALSE")))

# false

false

==>

BooleanExpression(BooleanLiteral(False("false")))

# TRUE

TRUE

==>

BooleanExpression(BooleanLiteral(True("TRUE")))

# true

true

==>

BooleanExpression(BooleanLiteral(True("true")))

# and

TRUE and FALSE

==>

BooleanExpression(BooleanAnd(BooleanLiteral(True("TRUE")), "and", BooleanLiteral(False("FALSE"))))

# or

TRUE or FALSE

==>

BooleanExpression(BooleanOr(BooleanLiteral(True("TRUE")), "or", BooleanLiteral(False("FALSE"))))

# and or

TRUE and FALSE or TRUE

==>

BooleanExpression(BooleanOr(BooleanAnd(BooleanLiteral(True("TRUE")), "and", BooleanLiteral(False("FALSE"))), "or", BooleanLiteral(True("TRUE"))))

# or and

TRUE or FALSE and TRUE

==>

BooleanExpression(BooleanOr(BooleanLiteral(True("TRUE")), "or", BooleanAnd(BooleanLiteral(False("FALSE")), "and", BooleanLiteral(True("TRUE")))))

# NOT true

NOT true

==>

BooleanExpression(NegatedBooleanTerm("NOT", BooleanLiteral(True("true"))))

# BinaryComparisonPredicate boolean literals

true = true

==>

BooleanExpression(BinaryComparisonPredicate(BooleanLiteral(True("true")), ComparisonOperator(Eq), BooleanLiteral(True("true"))))

# BinaryComparisonPredicate character clause

'test' = 'a b '' \\' 1 c'

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), CharacterLiteral))

# BinaryComparisonPredicate character clause casei

'test' = CASEI('test')

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), Casei("CASEI", CharacterExpression(CharacterLiteral))))

# BinaryComparisonPredicate character clause property name

'test' = CASEI(test)

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), Casei("CASEI", CharacterExpression(PropertyName))))

# BinaryComparisonPredicate character clause property name quoted

'test' = CASEI("test")

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), Casei("CASEI", CharacterExpression(PropertyName))))

# BinaryComparisonPredicate casei function

'test' = CASEI(fn(test))

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), Casei("CASEI", CharacterExpression(Function(PropertyName)))))

# BinaryComparisonPredicate date instanst

'test' = DATE('2000-01-01')

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), DateInstant("DATE")))

# BinaryComparisonPredicate timestamp instanst

'test' = TIMESTAMP('2000-01-01T12:01:01Z')

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), TimestampInstant("TIMESTAMP")))

# BinaryComparisonPredicate arithmetic

'test' = 1 + 1

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), ArithmeticExpression(ArithOp)))

# BinaryComparisonPredicate numeric literal

'test' = 1

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), ArithmeticExpression))

# BinaryComparisonPredicate PropertyName

'test' = test

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), ArithmeticExpression(PropertyName)))

# BinaryComparisonPredicate Function

'test' = fn()

==>

BooleanExpression(BinaryComparisonPredicate(CharacterLiteral, ComparisonOperator(Eq), ArithmeticExpression(Function)))

# binary comparison like

'test' LIKE 'test2'

==>

BooleanExpression(IsLikePredicate(CharacterExpression(CharacterLiteral), "LIKE", CharacterLiteral))

# binary comparison not like

'test' NOT LIKE 'test2'

==>

BooleanExpression(IsLikePredicate(CharacterExpression(CharacterLiteral), "NOT", "LIKE", CharacterLiteral))

