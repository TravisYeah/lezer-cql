@top BooleanExpression { booleanTerm }

booleanTerm {
	primary |
	BooleanAnd |
	BooleanOr |
	NegatedBooleanTerm
}

primary {
	predicate |
	BooleanLiteral
}

predicate {
	comparisonPredicate
}

comparisonPredicate {
	BinaryComparisonPredicate |
	IsLikePredicate
}

BinaryComparisonPredicate {
	scalarExpression ComparisonOperator scalarExpression
}

scalarExpression {
	characterClause |
	instantInstance |
	ArithmeticExpression |
	BooleanLiteral
}

IsLikePredicate { CharacterExpression kw<"NOT">? kw<"LIKE"> patternExpression }

patternExpression {
	kw<"CASEI"> "(" patternExpression ")" |
	kw<"ACCENTI"> "(" patternExpression ")" |
	CharacterLiteral
}

PropertyName {
	identifier |
	"\"" identifier "\""
}

characterClause {
	Casei |
	Accenti |
	CharacterLiteral
}

Casei {
	kw<"CASEI"> "(" CharacterExpression ")"
}

Accenti {
	kw<"Accenti"> "(" CharacterExpression ")"
}

CharacterExpression {
	characterClause |
	PropertyName |
	Function
}

Function { identifier "(" argumentList? ")" }

argumentList { argument ("," argument)* }

argument {
	characterClause |
	booleanTerm |
	PropertyName |
	Function
}

CharacterLiteral { "'" character* "'" }

character { alpha | digit | characterWhitespace | escapeQuote }

ComparisonOperator {
	Eq |
	Neq |
	Le |
	Gt |
	Leq |
	Gte
}

NegatedBooleanTerm {
	kw<"NOT"> booleanTerm
}

BooleanAnd {
	booleanTerm !and kw<"and"> booleanTerm
}

BooleanOr {
	booleanTerm !or kw<"or"> booleanTerm
}

BooleanLiteral { True | False }

True { kw<"TRUE"> | kw<"true"> }
False { kw<"FALSE"> | kw<"false"> }

ArithmeticExpression { arithmeticTerm  (arithmeticOperatorPlusMinus arithmeticTerm)? }

arithmeticOperatorPlusMinus { ArithOp<"+"> | ArithOp<"-"> }

arithmeticTerm { powerTerm (arithmeticOperatorMultDiv powerTerm)? }

arithmeticOperatorMultDiv { ArithOp<"*"> | ArithOp<"/"> | ArithOp<"%"> | kw<"div"> }

powerTerm { arithmeticFactor ( !power ArithOp<"^"> arithmeticFactor )? }

arithmeticFactor {
	"(" ArithmeticExpression ")" |
	arithmeticOperand
}

arithmeticOperand {
	numericLiteral |
	PropertyName |
	Function
}

numericLiteral { sign? unsignedNumericLiteral }

unsignedNumericLiteral { decimalNumericLiteral | scientificNumericLiteral }

signedNumericLiteral { sign? unsignedNumericLiteral }

decimalNumericLiteral { unsignedInteger ( "." unsignedInteger? )? | "." unsignedInteger }

scientificNumericLiteral { mantissa kw<"E"> exponent }

mantissa { decimalNumericLiteral }

exponent { signedInteger }

signedInteger { sign? unsignedInteger }

unsignedInteger { digit+ }

sign { "+" | "-" }

instantInstance { DateInstant | TimestampInstant }

DateInstant { kw<"DATE"> "(" dateInstantString ")" }

dateInstantString { "'" fullDate "'" }

TimestampInstant { kw<"TIMESTAMP"> "(" timestampInstantString ")" }

timestampInstantString { "'" fullDate "T" utcTime "'" }

intervalInstance { kw<"INTERVAL"> "(" instantParameter "," instantParameter ")" }

instantParameter {
	dateInstantString |
	timestampInstantString |
	"'..'" |
	PropertyName |
	Function
}

fullDate { dateYear "-" dateMonth "-" dateDay }

dateYear { digit digit digit digit }

dateMonth { digit digit }

dateDay { digit digit }

utcTime { timeHour ":" timeMinute ":" timeSecond "Z" }

timeHour { digit digit }

timeMinute { digit digit }

timeSecond { digit digit ("." digit digit*)? }

@precedence {
	NumericLiteral
	ArithmeticExpression
	DateInstant
	Casei
	Function
  power @right
  arithmeticOperatorMultDiv @left
	arithmeticOperatorPlusMinus @left
  and @left
  or @left
}

@tokens {
	identifier { identifierStart identifierPart* }
	alpha {
		$[\u{0007}-\u{0008}] |
		$[\u{0021}-\u{0026}] |
		$[\u{0028}-\u{002F}] |
		$[\u{003A}-\u{0084}] |
		$[\u{0086}-\u{009F}] |
		$[\u{00A1}-\u{167F}] |
		$[\u{1681}-\u{1FFF}] |
		$[\u{200B}-\u{2027}] |
		$[\u{202A}-\u{202E}] |
		$[\u{2030}-\u{205E}] |
		$[\u{2060}-\u{2FFF}] |
		$[\u{3001}-\u{D7FF}] |
		$[\u{E000}-\u{FFFD}] |
		$[\u{10000}-\u{10FFFF}]
	}
	digit { $[\u{0030}-\u{0039}] }
	characterWhitespace {
		$[\u{0009}] |
		$[\u{000A}] |
		$[\u{000B}] |
		$[\u{000C}] |
		$[\u{000D}] |
		$[\u{0020}] |
		$[\u{0085}] |
		$[\u{00A0}] |
		$[\u{1680}] |
		$[\u{2000}] |
		$[\u{2001}] |
		$[\u{2002}] |
		$[\u{2003}] |
		$[\u{2004}] |
		$[\u{2005}] |
		$[\u{2006}] |
		$[\u{2007}] |
		$[\u{2008}] |
		$[\u{2009}] |
		$[\u{200A}] |
		$[\u{2028}] |
		$[\u{2029}] |
		$[\u{202F}] |
		$[\u{205F}] |
		$[\u{3000}]
	}
	identifierStart {
		$[\u003A] |
		$[\u005F] |
		$[\u{0041}-\u{005A}] |
		$[\u{0061}-\u{007A}] |
		$[\u{00C0}-\u{00D6}] |
		$[\u{00D8}-\u{00F6}] |
		$[\u{00F8}-\u{02FF}] |
		$[\u{0370}-\u{037D}] |
		$[\u{037F}-\u{1FFE}] |
		$[\u{200C}-\u{200D}] |
		$[\u{2070}-\u{218F}] |
		$[\u{2C00}-\u{2FEF}] |
		$[\u{3001}-\u{D7FF}] |
		$[\u{F900}-\u{FDCF}] |
		$[\u{FDF0}-\u{FFFD}] |
		$[\u{10000}-\u{EFFFF}]
	}
	identifierPart {
		identifierStart |
		"." |
		digit |
		$[\u{0300}-\u{036F}] |
		$[\u{203F}-\u{2040}]
	}
	escapeQuote { "''" | "\\'" }
	Eq { "=" }
	Neq { "<" ">" }
	Le { "<" }
	Gt { ">" }
	Leq { "<" "=" }
	Gte { ">" "=" }
  space { @whitespace+ }

	@precedence { space, characterWhitespace }
	@precedence { space, identifierStart, identifierPart, identifier }
}

@skip { space }

kw<term> { @specialize[@name={term}]<identifier, term> }

ArithOp<expr> { expr }

