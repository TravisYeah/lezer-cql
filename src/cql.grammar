@top BooleanExpression { booleanTerm }

booleanTerm {
	primary |
	Not booleanTerm |
	ParenthesizedExpression
}

ParenthesizedExpression { "(" booleanTerm ")" }

primary {
	predicate |
	boolean
}

predicate {
	comparisonPredicate |
	spatialPredicate |
	temporalPredicate |
	arrayPredicate
}

comparisonPredicate {
	BinaryComparisonPredicate |
	IsLikePredicate |
	IsBetweenPredicate |
	IsInListPredicate |
	IsNullPredicate
}

arrayPredicate { arrayFunction "(" arrayOperand "," arrayOperand ")" }

arrayOperand {
	arrayExpression |
	PropertyName |
	Function
}

arrayExpression {
	"(" ")" |
	"(" ~arrayElement ("," arrayElement)* ")"
}

arrayElement {
	characterClause |
	temporalInstance |
	spatialInstance |
	arrayExpression |
	boolean |
	NumericLiteral |
	PropertyName |
	Function |
	ParenthesizedExpression
}

arrayFunction {
	kw<"A_EQUALS"> |
	kw<"A_CONTAINS"> |
	kw<"A_CONTAINEDBY"> |
	kw<"A_OVERLAPS">
}


temporalPredicate { temporalFunction "(" temporalExpression "," temporalExpression ")" }

temporalExpression {
	temporalInstance |
	PropertyName |
	Function
}

temporalFunction {
	kw<"T_AFTER"> |
	kw<"T_BEFORE"> |
	kw<"T_CONTAINS"> |
	kw<"T_DISJOINT"> |
	kw<"T_DURING"> |
	kw<"T_EQUALS"> |
	kw<"T_FINISHEDBY"> |
	kw<"T_FINISHES"> |
	kw<"T_INTERSECTS"> |
	kw<"T_MEETS"> |
	kw<"T_METBY"> |
	kw<"T_OVERLAPPEDBY"> |
	kw<"T_OVERLAPS"> |
	kw<"T_STARTEDBY"> |
	kw<"T_STARTS">
}

spatialPredicate { spatialFunction "(" geomExpression "," geomExpression ")" }

spatialFunction {
	kw<"S_INTERSECTS"> |
	kw<"S_EQUALS"> |
	kw<"S_DISJOINT"> |
	kw<"S_TOUCHES"> |
	kw<"S_WITHIN"> |
	kw<"S_OVERLAPS"> |
	kw<"S_CROSSES"> |
	kw<"S_CONTAINS">
}

geomExpression {
	spatialInstance |
	PropertyName |
	Function
}


IsNullPredicate { isNullOperand Is Not? Null }

isNullOperand {
	temporalInstance |
	spatialInstance |
	arithmeticExpression
}

IsInListPredicate { scalarExpression ~negated Not? In "(" inList ")" }

inList { scalarExpression ("," scalarExpression)* }

IsBetweenPredicate {
	arithmeticExpression ~negated Not? Between arithmeticExpression And arithmeticExpression
}

BinaryComparisonPredicate {
	scalarExpression comparisonOperator scalarExpression |
	booleanTerm !and And booleanTerm |
	booleanTerm !or Or booleanTerm
}

scalarExpression {
	characterClause |
	instantInstance |
	arithmeticExpression |
	boolean
}

IsLikePredicate { characterExpression ~negated Not? ~destructure Like patternExpression }

patternExpression {
	kw<"CASEI"> "(" patternExpression ")" |
	kw<"ACCENTI"> "(" patternExpression ")" |
	CharacterLiteral
}

PropertyName {
	Identifier |
	"\"" Identifier "\""
}

characterClause {
	casei |
	accenti |
	CharacterLiteral
}

casei {
	kw<"CASEI"> "(" characterExpression ")"
}

accenti {
	kw<"ACCENTI"> "(" characterExpression ")"
}

characterExpression {
	characterClause |
	PropertyName |
	Function
}

Function { Identifier "(" argumentList? ")" }

argumentList { argument ("," argument)* }

argument {
	characterClause |
	booleanTerm |
	PropertyName |
	Function
}

CharacterLiteral { "'" character* "'" }

character { alpha | digit | characterWhitespace | escapeQuote }

comparisonOperator {
	Eq |
	Neq |
	Le |
	Gt |
	Leq |
	Gte
}

boolean { @specialize[@name=BooleanLiteral]<Identifier, "true" | "TRUE" | "false" | "FALSE"> }

arithmeticExpression { arithmeticTerm  (arithmeticOperatorPlusMinus arithmeticTerm)? }

arithmeticOperatorPlusMinus { ArithOp<"+"> | ArithOp<"-"> }

arithmeticTerm { powerTerm (arithmeticOperatorMultDiv powerTerm)? }

arithmeticOperatorMultDiv { ArithOp<"*"> | ArithOp<"/"> | ArithOp<"%"> | Div }

powerTerm { arithmeticFactor ( !power ArithOp<"^"> arithmeticFactor )? }

arithmeticFactor {
	"(" arithmeticExpression ")" |
	arithmeticOperand
}

arithmeticOperand {
	NumericLiteral |
	PropertyName |
	Function
}

spatialInstance {
	geometryLiteral |
	geometryCollectionTaggedText |
	bboxTaggedText
}

geometryLiteral {
	pointTaggedText |
	linestringTaggedText |
	polygonTaggedText |
	multipointTaggedText |
	multilinestringTaggedText |
	multipolygonTaggedText
}

pointTaggedText { kw<"POINT"> kw<"Z">? pointText }

linestringTaggedText { kw<"LINESTRING"> kw<"Z">? lineStringText }

polygonTaggedText { kw<"POLYGON"> kw<"Z">? polygonText }

multipointTaggedText { kw<"MULTIPOINT"> kw<"Z">? multiPointText }

multilinestringTaggedText { kw<"MULTILINESTRING"> kw<"Z">? multiLineStringText }

multipolygonTaggedText { kw<"MULTIPOLYGON"> kw<"Z">? multiPolygonText }

geometryCollectionTaggedText { kw<"GEOMETRYCOLLECTION"> kw<"Z">? geometryCollectionText }

pointText { "(" point ")" }

lineStringText { "(" point "," point ("," point)* ")" }

linearRingText { kw<"EMPTY"> | "(" point "," point "," point "," point ("," point)* ")" }

polygonText {  "(" linearRingText ("," linearRingText)* ")" }

multiPointText { "(" pointText ("," pointText)* ")" }

multiLineStringText { "(" lineStringText ("," lineStringText)* ")" }

multiPolygonText { "(" polygonText ("," polygonText)* ")" }

geometryCollectionText { "(" geometryLiteral ("," geometryLiteral)* ")" }

bboxTaggedText { kw<"BBOX"> bboxText }

bboxText { "(" westBoundLon "," southBoundLat "," (minElev ",")? eastBoundLon "," northBoundLat ("," maxElev)? ")" }

westBoundLon { NumericLiteral }

eastBoundLon { NumericLiteral }

northBoundLat { NumericLiteral }

southBoundLat { NumericLiteral }

minElev { NumericLiteral }

maxElev { NumericLiteral }

temporalInstance { instantInstance | intervalInstance }

instantInstance { DateInstant | TimestampInstant }

DateInstant { kw<"DATE"> "(" DateInstantString ")" }

DateInstantString { "'" fullDate "'" }

TimestampInstant { kw<"TIMESTAMP"> "(" TimestampInstantString ")" }

TimestampInstantString { "'" fullDate "T" utcTime "'" }

intervalInstance { kw<"INTERVAL"> "(" instantParameter "," instantParameter ")" }

instantParameter {
	DateInstantString |
	TimestampInstantString |
	"'..'" |
	PropertyName |
	Function
}

fullDate { dateYear "-" dateMonth "-" dateDay }

dateYear { digit digit digit digit }

dateMonth { digit digit }

dateDay { digit digit }

utcTime { timeHour ":" timeMinute ":" timeSecond "Z" }

timeHour { digit digit }

timeMinute { digit digit }

timeSecond { digit digit ("." digit digit*)? }

Like { kw<"LIKE"> | kw<"like"> }
Between { kw<"BETWEEN"> | kw<"between"> }
Is { kw<"IS"> | kw<"is">  }
Not { kw<"NOT"> | kw<"not"> }
Null { kw<"NULL"> | kw<"null"> }
And { kw<"AND"> | kw<"and"> }
Or { kw<"OR"> | kw<"or"> }
In { kw<"IN"> | kw<"in"> }
Div { kw<"DIV"> kw<"div"> }

@precedence {
	NumericLiteral
	arithmeticExpression
	DateInstant
	Function
  power @right
  arithmeticOperatorMultDiv @left
	arithmeticOperatorPlusMinus @left
  and @left
  or @left
}

@tokens {
	Identifier { identifierStart identifierPart* }
	alpha {
		$[\u{0007}-\u{0008}] |
		$[\u{0021}-\u{0026}] |
		$[\u{0028}-\u{002F}] |
		$[\u{003A}-\u{0084}] |
		$[\u{0086}-\u{009F}] |
		$[\u{00A1}-\u{167F}] |
		$[\u{1681}-\u{1FFF}] |
		$[\u{200B}-\u{2027}] |
		$[\u{202A}-\u{202E}] |
		$[\u{2030}-\u{205E}] |
		$[\u{2060}-\u{2FFF}] |
		$[\u{3001}-\u{D7FF}] |
		$[\u{E000}-\u{FFFD}] |
		$[\u{10000}-\u{10FFFF}]
	}
	digit { $[\u{0030}-\u{0039}] }
	characterWhitespace {
		$[\u{0009}] |
		$[\u{000A}] |
		$[\u{000B}] |
		$[\u{000C}] |
		$[\u{000D}] |
		$[\u{0020}] |
		$[\u{0085}] |
		$[\u{00A0}] |
		$[\u{1680}] |
		$[\u{2000}] |
		$[\u{2001}] |
		$[\u{2002}] |
		$[\u{2003}] |
		$[\u{2004}] |
		$[\u{2005}] |
		$[\u{2006}] |
		$[\u{2007}] |
		$[\u{2008}] |
		$[\u{2009}] |
		$[\u{200A}] |
		$[\u{2028}] |
		$[\u{2029}] |
		$[\u{202F}] |
		$[\u{205F}] |
		$[\u{3000}]
	}
	identifierStart {
		$[\u003A] |
		$[\u005F] |
		$[\u{0041}-\u{005A}] |
		$[\u{0061}-\u{007A}] |
		$[\u{00C0}-\u{00D6}] |
		$[\u{00D8}-\u{00F6}] |
		$[\u{00F8}-\u{02FF}] |
		$[\u{0370}-\u{037D}] |
		$[\u{037F}-\u{1FFE}] |
		$[\u{200C}-\u{200D}] |
		$[\u{2070}-\u{218F}] |
		$[\u{2C00}-\u{2FEF}] |
		$[\u{3001}-\u{D7FF}] |
		$[\u{F900}-\u{FDCF}] |
		$[\u{FDF0}-\u{FFFD}] |
		$[\u{10000}-\u{EFFFF}]
	}
	identifierPart {
		identifierStart |
		"." |
		digit |
		$[\u{0300}-\u{036F}] |
		$[\u{203F}-\u{2040}]
	}
	escapeQuote { "''" | "\\'" }
	Eq { "=" }
	Neq { "<" ">" }
	Le { "<" }
	Gt { ">" }
	Leq { "<" "=" }
	Gte { ">" "=" }
  space { @whitespace+ }

	point { xCoord @whitespace yCoord (@whitespace zCoord)? }

	xCoord { NumericLiteral }

	yCoord { NumericLiteral }

	zCoord { NumericLiteral }

	NumericLiteral { sign? unsignedNumericLiteral }

	unsignedNumericLiteral { decimalNumericLiteral | scientificNumericLiteral }

	signedNumericLiteral { sign? unsignedNumericLiteral }

	decimalNumericLiteral { unsignedInteger ( "." unsignedInteger? )? | "." unsignedInteger }

	scientificNumericLiteral { mantissa "E" exponent }

	mantissa { decimalNumericLiteral }

	exponent { signedInteger }

	signedInteger { sign? unsignedInteger }

	unsignedInteger { digit+ }

	sign { "+" | "-" }

	@precedence { space, characterWhitespace }
	@precedence { space, identifierStart, identifierPart, Identifier }
}

@skip { space }

kw<term> { @specialize[@name={term}]<Identifier, term> }

ArithOp<expr> { expr }

@external propSource cqlHighlight from "./highlight"
